<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ookii.CommandLine</name>
    </assembly>
    <members>
        <member name="T:Ookii.CommandLine.AliasAttribute">
            <summary>
            Defines an alternative name for a command line argument.
            </summary>
            <remarks>
            <note>
              To specify multiple aliases, apply this attribute multiple times.
            </note>
            <para>
              The aliases for a command line argument can be used instead of their regular name to specify the parameter on the command line.
              For example, this can be used to have a shorter name for an argument (e.g. "-v" as an alternative to "-Verbose").
            </para>
            <para>
              All regular command line argument names and aliases used by an instance of the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class must be
              unique.
            </para>
            <para>
              By default, the command line usage help generated by <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/>
              does not list the aliases. Either manually add them to the description, or set the <see cref="P:Ookii.CommandLine.WriteUsageOptions.IncludeAliasInDescription"/>
              property to <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.AliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.AliasAttribute"/> class.
            </summary>
            <param name="alias">The alternative name for the command line argument.</param>
        </member>
        <member name="P:Ookii.CommandLine.AliasAttribute.Alias">
            <summary>
            Gets the alternative name for the command line argument.
            </summary>
            <value>
            The alternative name for the command line argument.
            </value>
        </member>
        <member name="T:Ookii.CommandLine.AllowDuplicateDictionaryKeysAttribute">
            <summary>
            Indicates that a dictionary argument accepts the same key more than once.
            </summary>
            <remarks>
            <para>
              If this attribute is applied to an argument whose type is <see cref="T:System.Collections.Generic.Dictionary`2"/> or
              <see cref="T:System.Collections.Generic.IDictionary`2"/>, a duplicate key will simply overwrite the previous value.
            </para>
            <para>
              If this attribute is not applied, a <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> with a <see cref="P:Ookii.CommandLine.CommandLineArgumentException.Category"/>
              of <see cref="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.InvalidDictionaryValue"/> will be thrown when a duplicate key is specified.
            </para>
            <para>
              The <see cref="T:Ookii.CommandLine.AllowDuplicateDictionaryKeysAttribute"/> is ignored if it is applied to any other type of argument.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.ArgumentNameAttribute">
            <summary>
            Indicates an alternative argument name for an argument defined by a constructor parameter.
            </summary>
            <remarks>
            <para>
              Apply the <see cref="T:Ookii.CommandLine.ArgumentNameAttribute"/> attribute to a constructor parameter to indicate
              that the name of the argument should be different than the parameter name.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Ookii.CommandLine.ArgumentNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.ArgumentNameAttribute"/> class.
            </summary>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="P:Ookii.CommandLine.ArgumentNameAttribute.ArgumentName">
            <summary>
            Gets the name of the argument.
            </summary>
            <value>
            The name of the argument.
            </value>
        </member>
        <member name="T:Ookii.CommandLine.ArgumentParsedEventArgs">
            <summary>
            Provides data for the <see cref="E:Ookii.CommandLine.CommandLineParser.ArgumentParsed"/> event.
            </summary>
            <remarks>
            <para>
              If the event handler sets the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/>, command line processing will stop immediately,
              and the <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[],System.Int32)"/> method will return <see langword="null"/>, even if all the required positional parameters have already
              been parsed. You can use this for instance to implement a "/?" argument that will display usage and quit regardless of the other command line arguments.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Ookii.CommandLine.ArgumentParsedEventArgs.#ctor(Ookii.CommandLine.CommandLineArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.ArgumentParsedEventArgs"/> class.
            </summary>
            <param name="argument">The information about the argument that has been parsed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Ookii.CommandLine.ArgumentParsedEventArgs.Argument">
            <summary>
            Gets the argument that was parsed.
            </summary>
            <value>
            The <see cref="T:Ookii.CommandLine.CommandLineArgument"/> instance for the argument.
            </value>
        </member>
        <member name="T:Ookii.CommandLine.CommandLineArgument">
            <summary>
            Provides information about command line arguments that are recognized by a <see cref="T:Ookii.CommandLine.CommandLineParser"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgument.ConvertToArgumentType(System.Globalization.CultureInfo,System.String)">
            <summary>
            Converts the specified string to the argument type, as specified in the <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> property.
            </summary>
            <param name="culture">The culture to use to convert the argument.</param>
            <param name="argument">The string to convert.</param>
            <returns>The argument, converted to the type specified by the <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> property.</returns>
            <remarks>
            <para>
              The <see cref="T:System.ComponentModel.TypeConverter"/> for the type specified by <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> is used to do the conversion.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="culture"/> is <see langword="null"/>
            </exception>
            <exception cref="T:Ookii.CommandLine.CommandLineArgumentException">
              <paramref name="argument"/> could not be converted to the type specified in the <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> property.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Ookii.CommandLine.CommandLineArgument"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Ookii.CommandLine.CommandLineArgument"/>.</returns>
            <remarks>
            <para>
              The string value matches the way the argument is displayed in the usage help's command line syntax
              when using the default <see cref="T:Ookii.CommandLine.WriteUsageOptions"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.MemberName">
            <summary>
            Gets the name of the property or constructor parameter that defined this command line argument.
            </summary>
            <value>
            The name of the property or constructor parameter that defined this command line argument.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.ArgumentName">
            <summary>
            Gets the name of this argument.
            </summary>
            <value>
            The name of this argument.
            </value>
            <remarks>
            <para>
              This name is used to supply an argument value by name on the command line, and to describe the argument in the usage help
              generated by <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.Aliases">
            <summary>
            Gets the alternative names for this command line argument.
            </summary>
            <value>
            A list of alternative names for this command line argument, or <see langword="null"/> if none were specified.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.ArgumentType">
            <summary>
            Gets the type of the argument.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the argument.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.ElementType">
            <summary>
            Gets the element type of the argument.
            </summary>
            <value>
            If the <see cref="P:Ookii.CommandLine.CommandLineArgument.IsMultiValue"/> property is <see langword="true"/>, the <see cref="T:System.Type"/> of each individual value; otherwise, the same value as <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.Position">
            <summary>
            Gets the position of this argument.
            </summary>
            <value>
            The position of this argument, or <see langword="null"/> if this is not a positional argument.
            </value>
            <remarks>
            <para>
              A positional argument is created either using a constructor parameter on the command line arguments type,
              or by using the <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/> property to create a named
              positional argument.
            </para>
            <para>
              The <see cref="P:Ookii.CommandLine.CommandLineArgument.Position"/> property reflects the actual position of the positional argument. For positional
              arguments created from properties this doesn't need to match the value of the <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.IsRequired">
            <summary>
            Gets a value that indicates whether the argument is required.
            </summary>
            <value>
              <see langword="true"/> if the argument's value must be specified on the command line; <see langword="false"/> if the argument may be omitted.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.DefaultValue">
            <summary>
            Gets the default value for an argument.
            </summary>
            <value>
            The default value of the argument.
            </value>
            <remarks>
            <para>
              This value is only used if <see cref="P:Ookii.CommandLine.CommandLineArgument.IsRequired"/> is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.Description">
            <summary>
            Gets the description of the argument.
            </summary>
            <value>
            The description of the argument.
            </value>
            <remarks>
            <para>
              This property is used only when generating usage information using <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/>.
            </para>
            <para>
              To set the description of an argument, apply the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute to the constructor parameter 
              or the property that defines the argument.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.ValueDescription">
            <summary>
            Gets the description of the property's value to use when printing usage information.
            </summary>
            <value>
            The description of the value.
            </value>
            <remarks>
            <para>
              The value description is a short (typically one word) description that indicates the type of value that
              the user should supply. By default the type of the property is used. If the type is an array type, the
              array's element type is used. If the type is a nullable type, its underlying type is used.
            </para>
            <para>
              The value description is used when printing usage. For example, the usage for an argument named Sample with
              a value description of String would look like "-Sample &lt;String&gt;".
            </para>
            <note>
              This is not the long description used to describe the purpose of the argument. That can be retrieved
              using the <see cref="P:Ookii.CommandLine.CommandLineArgument.Description"/> property.
            </note>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.IsSwitch">
            <summary>
            Gets a value indicating whether this argument is a switch argument.
            </summary>
            <value>
            	<see langword="true"/> if the argument is a switch argument; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              A switch argument is an argument that doesn't need a value; instead, its value is <see langword="true"/> or
              <see langword="false"/> depending on whether the argument is present on the command line.
            </para>
            <para>
              A argument is a switch argument when it is not positional, and its <see cref="P:Ookii.CommandLine.CommandLineArgument.ElementType"/> is either <see cref="T:System.Boolean"/> or a nullable <see cref="T:System.Boolean"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.IsMultiValue">
            <summary>
            Gets a value indicating whether this argument is a multi-value argument.
            </summary>
            <value>
            	<see langword="true"/> if the argument is a multi-value argument; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              A multi-value argument can accept multiple values by having the argument supplied more than once.
            </para>
            <para>
              An argument is a multi-value argument if its <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> is an array or the argument was defined by a read-only property whose type
              implements the <see cref="T:System.Collections.Generic.ICollection`1"/> generic interface, or when the <see cref="P:Ookii.CommandLine.CommandLineArgument.IsDictionary"/> property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.MultiValueSeparator">
            <summary>
            Gets the separator for the values if this argument is a multi-value argument
            </summary>
            <value>
            The separator for multi-value arguments, or <see langword="null"/> if no separator is used.
            </value>
            <remarks>
            <para>
              This property is only meaningful if the <see cref="P:Ookii.CommandLine.CommandLineArgument.IsMultiValue"/> property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.IsDictionary">
            <summary>
            Gets a value indicating whether this argument is a dictionary argument.
            </summary>
            <value>
            	<see langword="true"/> if this argument is a dictionary argument; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              A dictionary argument is an argument whose values have the form "key=value", which get added to a dictionary based on the key.
            </para>
            <para>
              An argument is a dictionary argument when its <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> is <see cref="T:System.Collections.Generic.Dictionary`2"/>, or it was defined by
              a read-only property whose type implements the <see cref="T:System.Collections.Generic.IDictionary`2"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.AllowsDuplicateDictionaryKeys">
            <summary>
            Gets a value indicating whether this argument, if it is a dictionary argument, allows duplicate keys.
            </summary>
            <value>
            	<see langword="true"/> if this argument allows duplicate keys; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              This property is only meaningful if the <see cref="P:Ookii.CommandLine.CommandLineArgument.IsDictionary"/> property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.Value">
            <summary>
            Gets the value that the argument was set to in the last call to <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[],System.Int32)"/>.
            </summary>
            <value>
              The value of the argument that was obtained when the command line arguments were parsed.
            </value>
            <remarks>
            <para>
              The <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> property provides an alternative method for accessing supplied argument
              values, in addition to using the object returned by <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[])"/>.
            </para>
            <para>
              If an argument was supplied on the command line, the <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> property will equal the
              supplied value after conversion to the type specified by the <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> property,
              and the <see cref="P:Ookii.CommandLine.CommandLineArgument.HasValue"/> property will be <see langword="true"/>.
            </para>
            <para>
              If an optional argument was not supplied, the <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> property will equal
              the <see cref="P:Ookii.CommandLine.CommandLineArgument.DefaultValue"/> property, and <see cref="P:Ookii.CommandLine.CommandLineArgument.HasValue"/> will be <see langword="false"/>.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CommandLineArgument.IsMultiValue"/> property is <see langword="true"/>, the <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> property will
              return an array with all the values, even if the argument type is a collection type rather than
              an array.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CommandLineArgument.IsDictionary"/> property is <see langword="true"/>, the <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> property will
              return a <see cref="T:System.Collections.Generic.Dictionary`2"/> with all the values, even if the argument type is a different type.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.HasValue">
            <summary>
            Gets a value indicating whether the value of this argument was supplied on the command line in the last
            call to <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[],System.Int32)"/>.
            </summary>
            <value>
            	<see langword="true"/> if this argument's value was supplied on the command line when the arguments were parsed; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              Use this property to determine whether or not an argument was supplied on the command line, or was
              assigned its default value.
            </para>
            <para>
              When an optional argument is not supplied on the command line, the <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> property will be equal
              to the <see cref="P:Ookii.CommandLine.CommandLineArgument.DefaultValue"/> property, and <see cref="P:Ookii.CommandLine.CommandLineArgument.HasValue"/> will be <see langword="false"/>.
            </para>
            <para>
              It is however possible for the user to supply a value on the command line that matches the default value.
              In that case, although the <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> property will still be equal to the <see cref="P:Ookii.CommandLine.CommandLineArgument.DefaultValue"/>
              property, the <see cref="P:Ookii.CommandLine.CommandLineArgument.HasValue"/> property will be <see langword="true"/>. This allows you to distinguish
              between an argument that was supplied or omitted even if the supplied value matches the default.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgument.UsedArgumentName">
            <summary>
            Gets the name or alias that was used on the command line to specify this argument.
            </summary>
            <value>
            The name or alias that was used on the command line to specify this argument, or <see langword="null"/> if this argument was specified by position or not specified.
            </value>
            <remarks>
            <para>
              If the argument names are case-insensitive, the value of this property uses the casing as specified on the command line, not the original casing of the argument name or alias.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.CommandLineArgumentErrorCategory">
            <summary>
            Specifies the kind of error that occurred while parsing arguments.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.Unspecified">
            <summary>
            The category was not specified.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.ArgumentValueConversion">
            <summary>
            The argument value supplied could not be converted to the type of the argument.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.UnknownArgument">
            <summary>
            The argument name supplied does not name a known argument.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.MissingNamedArgumentValue">
            <summary>
            An argument name was supplied, but without an accompanying value.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.DuplicateArgument">
            <summary>
            An argument was supplied more than once.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.TooManyArguments">
            <summary>
            Too many positional arguments were supplied.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.MissingRequiredArgument">
            <summary>
            Not all required arguments were supplied.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.InvalidDictionaryValue">
            <summary>
            Invalid value for a dictionary argument; typically the result of a duplicate key.
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.CreateArgumentsTypeError">
            <summary>
            An error occurred creating an instance of the arguments type (e.g. the constructor threw an exception).
            </summary>
        </member>
        <member name="F:Ookii.CommandLine.CommandLineArgumentErrorCategory.ApplyValueError">
            <summary>
            An error occurred applying the value of the argument (e.g. the property set accessor threw an exception).
            </summary>
        </member>
        <member name="T:Ookii.CommandLine.CommandLineConstructorAttribute">
            <summary>
            Indicates the constructor that should be used by the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class, if a class has multiple public constructors.
            </summary>
            <remarks>
            <para>
              If a class has only one public constructor, it is not necessary to use this attribute.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineConstructorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineConstructorAttribute"/> class.
            </summary>
        </member>
        <member name="T:Ookii.CommandLine.CommandLineParser">
            <summary>
            Parses command line arguments into a class of the specified type.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Ookii.CommandLine.CommandLineParser"/> class can parse a set of command line arguments into values. Which arguments are
              accepted is determined from the constructor parameters and properties of the type passed to the <see cref="M:Ookii.CommandLine.CommandLineParser.#ctor(System.Type)"/>
              constructor. The result of a parsing operation is an instance of that type that was constructed using the constructor parameters and
              property values from their respective command line arguments.
            </para>
            <para>
              The <see cref="T:Ookii.CommandLine.CommandLineParser"/> class can parse a command line and can generate usage help for arguments defined by the type
              passed to its constructor. This usage help can be presented to the user to provide information about how to invoke your application
              from the command line.
            </para>
            <para>
              The command line arguments are parsed using the parsing rules described below. A command line consists of a series of
              argument values; each value is assigned to the appropriate argument based on either the name or the position of the argument.
            </para>
            <para>
              Every argument has a name, and can have its value specified by name. To specify an argument name on the command line it must
              be preceded by a special prefix. On Windows, the argument name prefix is typically a forward
              slash (/), while on Unix platforms it is usually a single dash (-) or double dash (--). Which prefixes
              are accepted by the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class can be specified by using the <see cref="M:Ookii.CommandLine.CommandLineParser.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})"/>
              constructor. By default, it will accept both "/" and "-" on Windows, and only a "-" on all other platforms (other platforms are
              supported via <a href="http://www.mono-project.com">Mono</a>).
            </para>
            <note>
              Although almost any argument name is allowed as long as it isn't empty and doesn't contain a colon (:),
              certain argument names may not be advisable. Particularly, avoid argument names that start with a number, as they it will
              not be possible to specify them by name if the argument name prefix is a single dash; arguments starting with a single dash
              followed by a digit are always considered values during parsing, even if there is an argument with that name.
            </note>
            <para>
              The name of the argument must be followed by its value. The value can be either in the next argument (separated from the name
              by white space), or separated by a colon (:). For example, to assign the value "foo" to the argument "sample", you can use
              either <c>-sample foo</c> or <c>-sample:foo</c>.
            </para>
            <para>
              If an argument has a type of <see cref="T:System.Boolean"/> (and is not a positional argument as described below), it is a switch argument, and doesn't require a value. Its value is determined
              by its presence on the command line; if it is absent the value is <see langword="false"/>; if it is present the value is
              <see langword="true"/>. For example, to set a switch argument named "verbose" to true, you can simply use the command line
              <c>-verbose</c>. You can still explicitly specify the value of a switch argument, for example <c>-verbose:true</c>.
              Note that you cannot use white space to separate a switch argument name and value; you must use a colon.
            </para>
            <para>
              If the type of the argument is <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>, its value will be <see langword="null"/> if it is not supplied, <see langword="true"/> if it is supplied without
              an explicit value (or with an explicit value of <see langword="true"/>), and <see langword="false"/> only if its value was explicitly specified as <see langword="false"/>.
            </para>
            <para>
              An argument value can also refer to an argument by position. A positional argument is an argument that can be set both by
              name and position. When specified by name, it can appear in any position on the command line, but when specified by
              position, it must appear in the correct position.
            </para>
            <para>
              For example, if you have two arguments named "foo" and "bar" which have positions 0 and 1 respectively, you could
              specify their values using <c>value1 value2</c>, which assigns "value1" to "foo" and "value2" to "bar".
              However, you could also use <c>-bar value2 -foo value1</c> to achieve the same effect.
            </para>
            <para>
              If a positional argument was already specified by name, it is no longer considered as a target for positional argument values.
              In the previous example, if the command line <c>-foo value1 value2</c> is used, "value2" is the first positional argument value,
              but is assigned to "bar", the second positional argument, because "foo" had already been assigned a value by name.
            </para>
            <para>
              Arguments can either be required or optional. If an argument is required, the <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[])"/>
              method will throw a <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> if it is not supplied on the command line. For positional
              arguments, it is not allowed to have a required argument following a positional argument.
            </para>
            <para>
              If an argument has a type other than <see cref="T:System.String"/>, the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class will use the
              <see cref="T:System.ComponentModel.TypeDescriptor"/> class to get a <see cref="T:System.ComponentModel.TypeConverter"/> for that type to convert the supplied string value
              to the correct type. You can also use the <see cref="T:System.ComponentModel.TypeConverterAttribute"/> on the property or constructor parameter
              that defines the attribute to specify a custom type converter.
            </para>
            <para>
              If an argument has an array type, it can be specified more than once, and the value for each time is it specified
              is added to the array. Given an array argument named "sample", the command line <c>-sample 1 -sample 2 -sample 3</c>
              would set the value of "sample" to an array holding the values 1, 2 and 3. A required array argument must have at
              least one value. A positional array argument must be the last positional argument.
            </para>
            <para>
              To specify which arguments are accepted by the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class, you can use either constructor
              parameters or properties on the type holding the argument values.
            </para>
            <para>
              If the arguments type has only one constructor, its parameters are automatically used. If it has more than one
              constructor, one of the constructors must be marked using the <see cref="T:Ookii.CommandLine.CommandLineConstructorAttribute"/> attribute.
            </para>
            <para>
              Arguments for constructor parameters are always positional arguments, so can be specified by both name and position. The
              position of the command line argument will match the position of the constructor parameter. By default, the name of the
              argument matches the name of the parameter, but this can be overridden using the <see cref="T:Ookii.CommandLine.ArgumentNameAttribute"/> attribute.
              The argument is optional if the parameter has the <see cref="T:System.Runtime.InteropServices.OptionalAttribute"/> attribute applied,
              and its default value can be specified using the <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute"/> attribute.
              With Visual Basic and C# 4.0, you can use the built-in syntax for optional parameters to create an optional command line argument and
              specify the default value.
            </para>
            <para>
              A property defines a command line argument if it is <see langword="public"/>, not <see langword="static"/>, and has the
              <see cref="T:Ookii.CommandLine.CommandLineArgumentAttribute"/> attibute defined. The argument will only be positional if the <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/>
              property is set to a non-negative value, and will be required only if the <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.IsRequired"/>
              property is set to <see langword="true"/>.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class using the specified arguments type, the default argument name prefixes,
            and the default case-insensitive argument name comparer.
            </summary>
            <param name="argumentsType">The <see cref="T:System.Type"/> of the class that defines the command line arguments.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="argumentsType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:Ookii.CommandLine.CommandLineParser"/> cannot use <paramref name="argumentsType"/> as the command line arguments type, because it defines a required
              postional argument after an optional positional argument, it defines a positional array argument that is not the last positional argument, it defines an argument with an invalid name,
              it defines two arguments with the same name, or it has two properties with the same <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/> property value.
            </exception>
            <remarks>
            <para>
              This constructor uses the <see cref="P:System.StringComparer.OrdinalIgnoreCase"/> comparer for argument names.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class using the specified arguments type, the specified argument name prefixes,
            and the default case-insensitive argument name comparer.
            </summary>
            <param name="argumentsType">The <see cref="T:System.Type"/> of the class that defines the command line arguments.</param>
            <param name="argumentNamePrefixes">The prefixes that are used to indicate argument names on the command line, or <see langword="null"/> to use the default prefixes for the current platform.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="argumentsType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="argumentNamePrefixes"/> contains no elements or contains a <see langword="null"/> or empty string value.
            </exception>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:Ookii.CommandLine.CommandLineParser"/> cannot use <paramref name="argumentsType"/> as the command line arguments type, because it defines a required
              postional argument after an optional positional argument, it defines a positional array argument that is not the last positional argument, it defines an argument with an invalid name,
              it defines two arguments with the same name, or it has two properties with the same <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/> property value.
            </exception>
            <remarks>
            <para>
              If you specify multiple argument name prefixes, the first one will be used when generating usage information using the <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/> method.
            </para>
            <para>
              This constructor uses the <see cref="P:System.StringComparer.OrdinalIgnoreCase"/> comparer for argument names.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class using the specified arguments type, the specified argument name prefixes,
            and the specified <see cref="T:System.Collections.Generic.IComparer`1"/> for comparing argument names.
            </summary>
            <param name="argumentsType">The <see cref="T:System.Type"/> of the class that defines the command line arguments.</param>
            <param name="argumentNamePrefixes">The prefixes that are used to indicate argument names on the command line, or <see langword="null"/> to use the default prefixes for the current platform.</param>
            <param name="argumentNameComparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> that is used to match the names of arguments, or <see langword="null"/> to use the default case-insensitive comparer.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="argumentsType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="argumentNamePrefixes"/> contains no elements or contains a <see langword="null"/> or empty string value.
            </exception>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:Ookii.CommandLine.CommandLineParser"/> cannot use <paramref name="argumentsType"/> as the command line arguments type, because it defines a required
              postional argument after an optional positional argument, it defines a positional array argument that is not the last positional argument, it defines an argument with an invalid name,
              it defines two arguments with the same name, or it has two properties with the same <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/> property value.
            </exception>
            <remarks>
            <para>
              If you specify multiple argument name prefixes, the first one will be used when generating usage information using the <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.WriteUsageToConsole">
            <summary>
            Writes command line usage help to the standard output stream using the default options.
            </summary>
            <remarks>
              <para>
                The usage help consists of first the <see cref="P:Ookii.CommandLine.CommandLineParser.Description"/>, followed by the usage syntax, followed by a description of all the arguments.
              </para>
              <para>
                This method uses the default usage options, as specified by the default values of the <see cref="T:Ookii.CommandLine.WriteUsageOptions"/> class.
              </para>
              <para>
                You can add descriptions to the usage text by applying the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute to your command line arguments type,
                and the constructor parameters and properties defining command line arguments.
              </para>
              <para>
                Line wrapping at word boundaries is applied to the output, wrapping at the console's window width. When the console output is
                redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
                the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
              </para>
              <para>
                This method indents additional lines for the usage syntax and argument descriptions, unless the <see cref="P:System.Console.WindowWidth"/> property is less than 31.
              </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.WriteUsageToConsole(Ookii.CommandLine.WriteUsageOptions)">
            <summary>
            Writes command line usage help to the standard output stream using the specified options.
            </summary>
            <param name="options">The options to use for formatting the usage.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="options"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:Ookii.CommandLine.WriteUsageOptions.Indent"/> is less than zero or greater than or equal to <see cref="P:System.Console.WindowWidth"/> - 1, or 
              <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionIndent"/> is less than zero or greater than or equal to <see cref="P:System.Console.WindowWidth"/> - 1.
            </exception>
            <remarks>
              <para>
                The usage help consists of first the <see cref="P:Ookii.CommandLine.CommandLineParser.Description"/>, followed by the usage syntax, followed by a description of all the arguments.
              </para>
              <para>
                You can add descriptions to the usage text by applying the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute to your command line arguments type,
                and the constructor parameters and properties defining command line arguments.
              </para>
              <para>
                Line wrapping at word boundaries is applied to the output, wrapping at the console's window width. When the console output is
                redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
                the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
              </para>
              <para>
                This method indents additional lines for the usage syntax and argument descriptions, unless the <see cref="P:System.Console.WindowWidth"/> property is less than 31.
              </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32)">
            <summary>
            Writes command line usage help to the specified <see cref="T:System.IO.TextWriter"/> using the default options.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the usage to.</param>
            <param name="maximumLineLength">
              The maximum line length of lines in the usage text; if <paramref name="writer"/> is an instance 
              of <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/>, this parameter is ignored. A value less than 1 or larger than 65536 is interpreted as infinite line length.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="writer"/> is <see langword="null"/>.
            </exception>
            <remarks>
              <para>
                The usage help consists of first the <see cref="P:Ookii.CommandLine.CommandLineParser.Description"/>, followed by the usage syntax, followed by a description of all the arguments.
              </para>
              <para>
                This method uses the default usage options, as specified by the default values of the <see cref="T:Ookii.CommandLine.WriteUsageOptions"/> class.
              </para>
              <para>
                You can add descriptions to the usage text by applying the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute to your command line arguments type,
                and the constructor parameters and properties defining command line arguments.
              </para>
              <para>
                Line wrapping at word boundaries is applied to the output, wrapping at the specified line length. If the specified <paramref name="writer"/>
                is an instance of the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class, its <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property is used
                and the <paramref name="maximumLineLength"/> parameter is ignored.
              </para>
              <para>
                This method indents additional lines for the usage syntax and argument descriptions, unless the maximum line length is less than 30.
              </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)">
            <summary>
            Writes command line usage help to the specified <see cref="T:System.IO.TextWriter"/> using the specified options.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the usage to.</param>
            <param name="maximumLineLength">
              The maximum line length of lines in the usage text; if <paramref name="writer"/> is an instance 
              of <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/>, this parameter is ignored. A value less than 1 or larger than 65536 is interpreted as infinite line length.
            </param>
            <param name="options">The options to use for formatting the usage.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="writer"/> or <paramref name="options"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="P:Ookii.CommandLine.WriteUsageOptions.Indent"/> is less than zero or greater than or equal to <paramref name="maximumLineLength"/>, or 
              <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionIndent"/> is less than zero or greater than or equal to <paramref name="maximumLineLength"/>.
            </exception>
            <remarks>
              <para>
                The usage help consists of first the <see cref="P:Ookii.CommandLine.CommandLineParser.Description"/>, followed by the usage syntax, followed by a description of all the arguments.
              </para>
              <para>
                You can add descriptions to the usage text by applying the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute to your command line arguments type,
                and the constructor parameters and properties defining command line arguments.
              </para>
              <para>
                Line wrapping at word boundaries is applied to the output, wrapping at the specified line length. If the specified <paramref name="writer"/>
                is an instance of the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class, its <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property is used
                and the <paramref name="maximumLineLength"/> parameter is ignored.
              </para>
              <para>
                This method indents additional lines for the usage syntax and argument descriptions, unless the maximum line length is less than 30.
              </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[])">
            <summary>
            Parses the specified command line arguments.
            </summary>
            <param name="args">The command line arguments.</param>
            <returns>
              An instance of the type specified by the <see cref="P:Ookii.CommandLine.CommandLineParser.ArgumentsType"/> property, or <see langword="null"/> if argument
              parsing was cancelled by the <see cref="E:Ookii.CommandLine.CommandLineParser.ArgumentParsed"/> event handler.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Ookii.CommandLine.CommandLineArgumentException">
              Too many positional arguments were supplied, a required argument was not supplied, an unknown argument name was supplied,
              no value was supplied for a named argument, an argument was supplied more than once and <see cref="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments"/>
              is <see langword="false"/>, or one of the argument values could not be converted to the argument's type.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[],System.Int32)">
            <summary>
            Parses the specified command line arguments, starting at the specified index.
            </summary>
            <param name="args">The command line arguments.</param>
            <param name="index">The index of the first argument to parse.</param>
            <returns>
              An instance of the type specified by the <see cref="P:Ookii.CommandLine.CommandLineParser.ArgumentsType"/> property, or <see langword="null"/> if argument
              parsing was cancelled by the <see cref="E:Ookii.CommandLine.CommandLineParser.ArgumentParsed"/> event handler.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> does not fall within the bounds of <paramref name="args"/>.
            </exception>
            <exception cref="T:Ookii.CommandLine.CommandLineArgumentException">
              Too many positional arguments were supplied, a required argument was not supplied, an unknown argument name was supplied,
              no value was supplied for a named argument, an argument was supplied more than once and <see cref="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments"/>
              is <see langword="false"/>, or one of the argument values could not be converted to the argument's type.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineParser.OnArgumentParsed(Ookii.CommandLine.ArgumentParsedEventArgs)">
            <summary>
            Raises the <see cref="E:Ookii.CommandLine.CommandLineParser.ArgumentParsed"/> event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="E:Ookii.CommandLine.CommandLineParser.ArgumentParsed">
            <summary>
            Event raised when an argument is parsed from the command line.
            </summary>
            <remarks>
            <para>
              If the event handler sets the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/>, command line processing will stop immediately,
              and the <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[],System.Int32)"/> method will return <see langword="null"/>. You can use this for instance to implement a "-help"
              argument that will display usage and quit regardless of the other command line arguments.
            </para>
            <para>
              This event is invoked after the <see cref="P:Ookii.CommandLine.CommandLineArgument.Value"/> and <see cref="P:Ookii.CommandLine.CommandLineArgument.UsedArgumentName"/> properties have been set.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.DefaultUsagePrefix">
            <summary>
            Gets the default prefix for the command line usage information.
            </summary>
            <value>
            A string consisting of the text "Usage: " followed by the file name of the application's entry point assembly.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.DefaultArgumentNamePrefixes">
            <summary>
            Gets the default argument name prefixes for the current platform.
            </summary>
            <value>
            A forward slash (/) and a dash (-) for Windows, or a dash (-) for all other platforms platforms.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.ArgumentNamePrefixes">
            <summary>
            Gets the argument name prefixes used by this instance.
            </summary>
            <value>
            A list of argument name prefixes.
            </value>
            <remarks>
            <para>
              The argument name prefixes are used to distinguish argument names from positional argument values in a command line.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.ArgumentsType">
            <summary>
            Gets the type that was used to define the arguments.
            </summary>
            <value>
            The type that was used to define the arguments.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.Description">
            <summary>
            Gets a description that is used when generating usage information.
            </summary>
            <value>
            The description of the command line application. The default value is an empty string ("").
            </value>
            <remarks>
            <para>
              This description will be added to the usage returned by the <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/> property. This description can be set by applying
              the <see cref="T:System.ComponentModel.DescriptionAttribute"/> to the command line arguments type.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.Culture">
            <summary>
            Gets or sets the culture used to convert command line argument values from their string representation to the argument type.
            </summary>
            <value>
            The culture used to convert command line argument values from their string representation to the argument type. The default value
            is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments">
            <summary>
            Gets or sets a value indicating whether duplicate arguments are allowed.
            </summary>
            <value>
              <see langword="true"/> if it is allowed to supply non-array arguments more than once; otherwise, <see langword="false"/>.
              The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              If the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments"/> property is <see langword="false"/>, a <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> is thrown by the <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[],System.Int32)"/>
              method if an argument's value is supplied more than once.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments"/> property is <see langword="true"/>, the last value supplied for the argument is used if it is supplied multiple times.
            </para>
            <para>
              The <see cref="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments"/> property has no effect on arguments whose <see cref="P:Ookii.CommandLine.CommandLineArgument.ArgumentType"/> is an array, which can
              always be supplied multiple times.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.AllowWhiteSpaceValueSeparator">
            <summary>
            Gets or sets a value indicating whether the value of arguments may be separated from the name by white space.
            </summary>
            <value>
              <see langword="true"/> if white space is allowed to separate an argument name and its value; <see langword="false"/> if only the colon (:) is allowed.
              The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
              If the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowWhiteSpaceValueSeparator"/> property is <see langword="true"/>, the value of an argument can be separated from its name either
              by using a colon (:) or by using white space. Given a named argument named "sample", the command lines <c>-sample:value</c> and <c>-sample value</c>
              are both valid and will assign the value "value" to the argument.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowWhiteSpaceValueSeparator"/> property is <see langword="false"/>, only the colon (:) is allowed to separate the value from the name.
              The command line <c>-sample:value</c> still assigns the value "value" to the argument, but for the command line "-sample value" the argument 
              is considered not to have a value (which is only valid if <see cref="P:Ookii.CommandLine.CommandLineArgument.IsSwitch"/> is <see langword="true"/>), and
              "value" is considered to be the value for the next positional argument.
            </para>
            <para>
              For switch arguments (<see cref="P:Ookii.CommandLine.CommandLineArgument.IsSwitch"/> is <see langword="true"/>), only the colon (:) is allowed to
              specify an explicit value regardless of the value of the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowWhiteSpaceValueSeparator"/> property. Given a switch argument named "switch" 
              the command line <c>-switch false</c> is interpreted to mean that the value of "switch" is <see langword="true"/> and the value of the
              next positional argument is "false", even if the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowWhiteSpaceValueSeparator"/> property is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineParser.Arguments">
            <summary>
            Gets the arguments supported by this <see cref="T:Ookii.CommandLine.CommandLineParser"/> instance.
            </summary>
            <value>
            A list of all the arguments.
            </value>
            <remarks>
            <para>
              The <see cref="P:Ookii.CommandLine.CommandLineParser.Arguments"/> property can be used to retrieve additional information about the arguments, including their name, description,
              and default value. Their current value can also be retrieved this way, in addition to using the arguments type directly.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.CommandLineArgumentException">
            <summary>
            The exception that is thrown when command line parsing failed due to an invalid command line.
            </summary>
            <remarks>
            <para>
              This exception indicates that the command line passed to the <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[])"/> method
              was invalid for the arguments defined by the <see cref="T:Ookii.CommandLine.CommandLineParser"/> instance.
            </para>
            <para>
              The exception can indicate that too many positional arguments were supplied, a required argument was not supplied, an unknown argument name was supplied,
              no value was supplied for a named argument, an argument was supplied more than once and the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments"/> property
              is <see langword="false"/>, or one of the argument values could not be converted to the argument's type.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class. 
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor(System.String,Ookii.CommandLine.CommandLineArgumentErrorCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="category">The category of this error.</param>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor(System.String,System.String,Ookii.CommandLine.CommandLineArgumentErrorCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class with a specified error message and argument name.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="argumentName">The name of the argument that was invalid.</param>
            <param name="category">The category of this error.</param>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class with a specified error message and a reference to the inner <see cref="T:System.Exception"/> that is the cause of this <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>. 
            </summary>
            <param name="message">The error message that explains the reason for the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>.</param>
            <param name="inner">The <see cref="T:System.Exception"/> that is the cause of the current <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>, or a <see langword="null"/> if no inner <see cref="T:System.Exception"/> is specified.</param>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor(System.String,Ookii.CommandLine.CommandLineArgumentErrorCategory,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class with a specified error message and a reference to the inner <see cref="T:System.Exception"/> that is the cause of this <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>. 
            </summary>
            <param name="message">The error message that explains the reason for the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>.</param>
            <param name="inner">The <see cref="T:System.Exception"/> that is the cause of the current <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>, or a <see langword="null"/> if no inner <see cref="T:System.Exception"/> is specified.</param>
            <param name="category">The category of this error.</param>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor(System.String,System.String,Ookii.CommandLine.CommandLineArgumentErrorCategory,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class with a specified error message and argument name, and a reference to the inner <see cref="T:System.Exception"/> that is the cause of this <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>. 
            </summary>
            <param name="message">The error message that explains the reason for the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>.</param>
            <param name="argumentName">The name of the argument that was invalid.</param>
            <param name="category">The category of this error.</param>
            <param name="inner">The <see cref="T:System.Exception"/> that is the cause of the current <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/>, or a <see langword="null"/> if no inner <see cref="T:System.Exception"/> is specified.</param>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the <see cref="T:Ookii.CommandLine.CommandLineArgumentException"/> being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the parameter name and additional exception information.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgumentException.ArgumentName">
            <summary>
            Gets the name of the argument that was invalid.
            </summary>
            <value>
            The name of the invalid argument, or <see langword="null"/> if the error does not refer to a specific argument.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgumentException.Category">
            <summary>
            Gets the category of this error.
            </summary>
            <value>
            One of the values of the <see cref="T:Ookii.CommandLine.CommandLineArgumentErrorCategory"/> enumeration indicating the kind of error that occurred.
            </value>
        </member>
        <member name="T:Ookii.CommandLine.CreateShellCommandOptions">
            <summary>
            Provides options for the <see cref="M:Ookii.CommandLine.ShellCommand.CreateShellCommand(System.Reflection.Assembly,System.String,System.String[],System.Int32,Ookii.CommandLine.CreateShellCommandOptions)"/> method.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.CreateShellCommandOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CreateShellCommandOptions"/> class.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.CommandNameComparer">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare command names.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare command names. The default value is <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.ArgumentNamePrefixes">
            <summary>
            Gets or sets the argument name prefixes to use when parsing the shell command's arguments.
            </summary>
            <value>
            The named argument switches, or <see langword="null"/> to indicate the default prefixes for
            the current platform must be used. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.ArgumentNameComparer">
            <summary>
            Gets or set the <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare argument names.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to use to compare the names of named arguments. The default value is <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.Out">
            <summary>
            Gets or sets the output <see cref="T:System.IO.TextWriter"/> used to print usage information.
            </summary>
            <value>
            The <see cref="T:System.IO.TextWriter"/> used to print usage information, or <see langword="null"/>
            to print to the standard output stream. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.Error">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> used to print error information.
            </summary>
            <value>
            The <see cref="T:System.IO.TextWriter"/> used to print error information, or <see langword="null"/>
            to print to the standard output stream. The default value is <see langword="null"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.AllowDuplicateArguments">
            <summary>
            Gets or sets a value indicating whether duplicate arguments are allowed.
            </summary>
            <value>
              <see langword="true"/> if it is allowed to supply non-array arguments more than once; otherwise, <see langword="false"/>.
              The default value is <see langword="false"/>.
            </value>
            <seealso cref="P:Ookii.CommandLine.CommandLineParser.AllowDuplicateArguments"/>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.AllowWhiteSpaceValueSeparator">
            <summary>
            Gets or sets a value indicating whether the value of arguments may be separated from the name by white space.
            </summary>
            <value>
              <see langword="true"/> if white space is allowed to separate an argument name and its value; <see langword="false"/> if only the colon (:) is allowed.
              The default value is <see langword="true"/>.
            </value>
            <seealso cref="P:Ookii.CommandLine.CommandLineParser.AllowWhiteSpaceValueSeparator"/>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.UsageOptions">
            <summary>
            Gets or sets the options to use when parsing the shell command fails.
            </summary>
            <value>
            The usage options.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.CommandUsageFormat">
            <summary>
            Gets or sets the format string to use for the usage help if no command name was supplied or the command name was not recognized.
            </summary>
            <value>
            The format string to use for the usage if no command was specified or the command name was not recognized. The default value is "{0} &lt;command&gt; [args...]".
            </value>
            <remarks>
            <para>
              This format string shoud have one placeholder, which is used for the value of the <see cref="P:Ookii.CommandLine.WriteUsageOptions.UsagePrefix"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.CommandDescriptionFormat">
            <summary>
            Gets or sets the format string used to format a command's name and description.
            </summary>
            <value>
            The format string used to format a command's name and description. The default value is "    {0}\n{1}\n".
            </value>
            <remarks>
            <para>
              This format string should have two placeholders, which are used for command's name and description respectively. If the
              format ends in a line break, the commands will be separated by a blank line (this is the default).
            </para>
            <para>
              If you change the description format, you should also change the value of the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.CommandDescriptionIndent"/>
              to an appropriate value. The default format uses an indentation of 8 characters.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.CommandDescriptionIndent">
            <summary>
            Gets or sets the number of characters by which to indent the all but the first line of command descriptions.
            </summary>
            <value>
            The number of characters by which to indent the all but the first line of command descriptions. The default value is 8.
            </value>
            <remarks>
            <para>
              This value should be adjusted to match the formatting specified by the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.CommandDescriptionFormat"/> property.
            </para>
            <para>
              This value is not used if the maximum line length of the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> to which the usage
              is being written is less than 30.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CreateShellCommandOptions.AvailableCommandsHeader">
            <summary>
            Gets or sets the header that is used when printing a list of commands if no command name was supplied or the command name was not recognized.
            </summary>
            <value>
            The header that is used when printing a list of commands if no command name was supplied or the command name was not recognized. The default value is "The following commands are available:".
            </value>
        </member>
        <member name="T:Ookii.CommandLine.KeyValuePairConverter`2">
            <summary>
            Converts key-value pairs to and from strings using key=value notation.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <remarks>
            <para>
              This <see cref="T:System.ComponentModel.TypeConverter"/> is used for dictionary command line arguments.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.KeyValuePairConverter`2.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            <see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ookii.CommandLine.KeyValuePairConverter`2.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Ookii.CommandLine.KeyValuePairConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.KeyValuePairConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
              </exception>
        </member>
        <member name="T:Ookii.CommandLine.LineWrappingTextWriter">
            <summary>
            Implements a <see cref="T:System.IO.TextWriter"/> that writes text to another <see cref="T:System.IO.TextWriter"/>, wrapping
            lines at word boundaries at a specific maximum line length.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> will buffer the data written to it until an explicit new line is present in the text, or until
              the length of the buffered data exceeds the value of the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property.
            </para>
            <para>
              If the length of the buffered data exceeds the value of the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property, the
              <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> will attempt to find a white space character to break the line at. If such a white space character
              is found, everything before that character is output to the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.BaseWriter"/>, and everything after that character is kept
              in the buffer. The white space character itself is not written to the output.
            </para>
            <para>
              If no suitable place to break the line could be found, the line is broken at the maximum line length. This may occur in the middle
              of a word.
            </para>
            <para>
              After a line break (either one that was caused by wrapping or one that was part of the text), the next line is indented by the
              number of characters specified by the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.Indent"/> property. The length of the indentation counts towards the maximum line length.
            </para>
            <para>
              When the <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.Flush"/> method is called, the current contents of the buffer are written to the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.BaseWriter"/>, followed
              by a new line, unless the buffer is empty. If the buffer contains only indentation, it is considered empty and no new line is written.
              Calling <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.Flush"/> has the same effect as writing a new line to the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> if the buffer is not empty.
              The <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> is flushed when the <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.Dispose(System.Boolean)"/> method is called.
            </para>
            <para>
              The <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.ResetIndent"/> property can be used to move the output position back to the beginning of the line. If the buffer is
              not empty, is is first flushed and indentation is reset to zero on the next line. After the next line break, indentation will again
              be set to the value of the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.Indent"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.#ctor(System.IO.TextWriter,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class.
            </summary>
            <param name="baseWriter">The <see cref="T:System.IO.TextWriter"/> to which to write the wrapped output.</param>
            <param name="maximumLineLength">The maximum length of a line, in characters; a value of less than 1 or larger than 65536 means there is no maximum line length.</param>
            <param name="disposeBaseWriter">If set to <see langword="true"/> the <paramref name="baseWriter"/> will be disposed when the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> is disposed.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="baseWriter"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
              The largest <paramref name="maximumLineLength"/> value supported is 65535. Above that, line length is considered to be unbounded. This is done
              to avoid having to allocate very large buffers to support these long line lengths.
            </para>
            <para>
              If you want to write to the console, use <see cref="P:System.Console.Out"/> or <see cref="P:System.Console.Error"/> as the <paramref name="baseWriter"/> and
              specify <see cref="P:System.Console.WindowWidth"/> - 1 as the <paramref name="maximumLineLength"/> and <see langword="false"/> for <paramref name="disposeBaseWriter"/>. If you don't
              subtract one from the window width, additional empty lines can be printed if a line is exactly the width of the console. You can easily create a <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/>
              that writes to the console by using the <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.ForConsoleOut"/> and <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.ForConsoleError"/> methods.
            </para>
            <para>
              When the console output is redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono
              the value of <see cref="P:System.Console.WindowWidth"/> will be 0. In that case, the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> will use no
              line limit.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.ForConsoleOut">
            <summary>
            Gets a <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to the standard output stream.
            </summary>
            <returns>A <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to the standard output stream.</returns>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.ForConsoleError">
            <summary>
            Gets a <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to the standard error stream.
            </summary>
            <returns>A <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to the standard error stream.</returns>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.ForStringWriter(System.Int32,System.IFormatProvider)">
            <summary>
            Gets a <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to a <see cref="T:System.IO.StringWriter"/> using the specified format provider.
            </summary>
            <param name="maximumLineLength">The maximum length of a line, in characters.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that controls formatting.</param>
            <returns>A <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to a <see cref="T:System.IO.StringWriter"/>.</returns>
            <remarks>
              To retrieve the resulting string, first call <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.Flush"/>, then use the <see cref="M:System.IO.StringWriter.ToString"/> method
              of the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.BaseWriter"/>.
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.ForStringWriter(System.Int32)">
            <summary>
            Gets a <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to a <see cref="T:System.IO.StringWriter"/>.
            </summary>
            <param name="maximumLineLength">The maximum length of a line, in characters.</param>
            <returns>A <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> that writes to a <see cref="T:System.IO.StringWriter"/>.</returns>
            <remarks>
              To retrieve the resulting string, first call <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.Flush"/>, then use the <see cref="M:System.IO.StringWriter.ToString"/> method
              of the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.BaseWriter"/>.
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.ObjectDisposedException">
              The <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
              An I/O error occurs.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.ObjectDisposedException">
              The <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
              An I/O error occurs.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentException">
              The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="buffer"/> parameter is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
              An I/O error occurs.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.ResetIndent">
            <summary>
            Restarts writing on the beginning of the line, without indenting that line.
            </summary>
            <remarks>
            <para>
              The <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.ResetIndent"/> method will reset the output position to the beginning of the current line.
              It does not modify the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.Indent"/> property, so the text will be indented again the next time
              a line break is written to the output.
            </para>
            <para>
              If the current line buffer is not empty, it will be flushed to the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.BaseWriter"/>, followed by a new line
              before the indentation is reset. If the current line buffer is empty (a line containing only indentation is considered empty),
              the output position is simply reset to the beginning of the line without writing anything to the base writer.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.LineWrappingTextWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="P:Ookii.CommandLine.LineWrappingTextWriter.BaseWriter">
            <summary>
            Gets the <see cref="T:System.IO.TextWriter"/> that this <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> is writing to.
            </summary>
            <value>
            The <see cref="T:System.IO.TextWriter"/> that this <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> is writing to.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.LineWrappingTextWriter.Encoding">
            <summary>
            Returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value>
              The <see cref="T:System.Text.Encoding"/> in which the output is written.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength">
            <summary>
            Gets the maximum length of a line in the output.
            </summary>
            <value>
            The maximum length of a line, or zero if the line length is not limited.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.LineWrappingTextWriter.Indent">
            <summary>
            Gets or sets the amount of characters to indent all but the first line.
            </summary>
            <value>
            The amount of characters to indent all but the first line of text.
            </value>
            <remarks>
            <para>
              Whenever a line break is encountered (either because of wrapping or because a line break was written to the
              <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/>, the next line is indented by the number of characters specified
              by the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.Indent"/> property.
            </para>
            <para>
              The output position can be reset to the start of the line after a line break by calling <see cref="M:Ookii.CommandLine.LineWrappingTextWriter.ResetIndent"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.CommandLineArgumentAttribute">
            <summary>
            Indicates a property of a class defines a command line argument.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentAttribute"/> class using the property name as the argument name.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.CommandLineArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.CommandLineArgumentAttribute"/> class using the specified argument name.
            </summary>
            <param name="argumentName">The name of the argument, or <see langword="null"/> to indicate the property name should be used.</param>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgumentAttribute.ArgumentName">
            <summary>
            Gets the name of the argument's command switch.
            </summary>
            <value>
            The name of the command switch used to set the argument, or <see langword="null"/> if the property name should be used.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgumentAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether the named argument is required.
            </summary>
            <value>
              <see langword="true"/> if the named argument must be supplied on the command line; otherwise, <see langword="false"/>.
              The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position">
            <summary>
            Gets or sets the position of a positional argument.
            </summary>
            <value>
            The position of the argument, or a negative value if the argument can only be specified by name. The default value is -1.
            </value>
            <remarks>
            <para>
              The <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/> property specifies the relative position of the positional arguments created by properties. If
              you skip any numbers, they will be ignored; if you have only two positional arguments with positions set to
              4 and 7, they will be the first and second positional arguments, not the 4th and 7th. It is an error
              to use the same number more than once.
            </para>
            <para>
              If you have arguments defined by the type's constructor parameters, positional arguments defined by properties will
              always come after them; for example, if you have two contructor parameter arguments and one property positional argument with
              position 0, then that argument will actually be the third positional argument.
            </para>
            <para>
              The <see cref="P:Ookii.CommandLine.CommandLineArgument.Position"/> property will be set to reflect the actual position of the argument,
              which may not match the value of the <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.Position"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgumentAttribute.DefaultValue">
            <summary>
            Gets or sets the default value to be assigned to the property if the argument is not supplied on the command line.
            </summary>
            <value>
            The default value for the argument. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
              The <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.DefaultValue"/> property will not be used if the <see cref="P:Ookii.CommandLine.CommandLineArgumentAttribute.IsRequired"/> property is <see langword="true"/>,
              or if the argument is a multi-value or dictionary argument.
            </para>
            <para>
              By default, the command line usage help generated by <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/>
              does not include the default value. Either manually add it to the description, or set the <see cref="P:Ookii.CommandLine.WriteUsageOptions.IncludeDefaultValueInDescription"/>
              property to <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.CommandLineArgumentAttribute.ValueDescription">
            <summary>
            Gets or sets the description of the property's value to use when printing usage information.
            </summary>
            <value>
            The description of the value, or <see langword="null"/> to indicate that the property's type name should be used.
            </value>
            <remarks>
            <para>
              The value description is a short (typically one word) description that indicates the type of value that
              the user should supply. By default the type of the property is used. If the type is an array type, the
              array's element type is used. If the type is a nullable type, the nullable type's underlying type is used.
            </para>
            <para>
              The value description is used when printing usage. For example, the usage for an argument named Sample with
              a value description of String would look like "-Sample &lt;String&gt;".
            </para>
            <note>
              This is not the long description used to describe the purpose of the argument. That should be specified
              using the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute.
            </note>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.MultiValueSeparatorAttribute">
            <summary>
            Specifies a separator for the values of multi-value arguments
            </summary>
            <remarks>
            <note>
              If you specify a separator for a multi-value argument, it will <em>not</em> be possible
              to use the separator character in the individual argument values. There is no way to escape it.
            </note>
            <para>
              Normally, the values for a multi-value argument can only be specified by specifying the argument
              multiple times, e.g. by using <c>-Sample Value1 -Sample Value2</c>. If you specify the
              <see cref="T:Ookii.CommandLine.MultiValueSeparatorAttribute"/> it allows you to specify multiple values with a single
              argument by separating them with the specified separator. For example, if the separator is set
              to a comma, you can use <c>-Sample Value1,Value2</c>. In this example, it is no longer possible
              to have an argument value containing a comma.
            </para>
            <para>
              Even if the <see cref="T:Ookii.CommandLine.MultiValueSeparatorAttribute"/> is specified it is still possible to use
              multiple arguments to specify multiple values. For example, using a comma as the separator, 
              <c>-Sample Value1,Value2 -Sample Value3</c> will mean the argument "Sample" has three values.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.MultiValueSeparatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.MultiValueSeparatorAttribute"/> class.
            </summary>
            <param name="separator">The separator that separates the values.</param>
            <remarks>
            <note>
              If you specify a separator for a multi-value argument, it will <em>not</em> be possible
              to use the separator character in the individual argument values. There is no way to escape it.
            </note>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.MultiValueSeparatorAttribute.Separator">
            <summary>
            Gets the separator for the values of a multi-value argument.
            </summary>
            <value>
            The separator for the argument values.
            </value>
            <remarks>
            <note>
              If you specify a separator for a multi-value argument, it will <em>not</em> be possible
              to use the separator character in the individual argument values. There is no way to escape it.
            </note>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.ArgumentConversionErrorFormat">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; provided for argument &apos;{1}&apos; could not be interpreted as a &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.ArgumentNameContainsSeparatorFormat">
            <summary>
              Looks up a localized string similar to The name for argument &apos;{0}&apos; contains a colon (:), which is not allowed..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.ArrayNotLastArgument">
            <summary>
              Looks up a localized string similar to A positional array argument must be the last positional argument..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.CreateArgumentsTypeErrorFormat">
            <summary>
              Looks up a localized string similar to An error occurred creating an instance of the arguments type: {0}.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultAliasesFormat">
            <summary>
              Looks up a localized string similar to  Aliases: {0}..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultAliasFormat">
            <summary>
              Looks up a localized string similar to  Alias: {0}..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultArgumentDescriptionFormat">
             <summary>
               Looks up a localized string similar to     {3}{0} {2}
            {1}{4}{5}
            .
             </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultArraySuffix">
            <summary>
              Looks up a localized string similar to ....
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultAvailableCommandsHeader">
            <summary>
              Looks up a localized string similar to The following commands are available:.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultCommandFormat">
             <summary>
               Looks up a localized string similar to     {0}
            {1}
            .
             </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultCommandUsageFormat">
            <summary>
              Looks up a localized string similar to {0} &lt;command&gt; [args...].
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultDefaultValueFormat">
            <summary>
              Looks up a localized string similar to  Default value: {0}..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultOptionalArgumentFormat">
            <summary>
              Looks up a localized string similar to [{0}].
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultUsagePrefixFormat">
            <summary>
              Looks up a localized string similar to Usage: {0}.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DefaultValueDescriptionFormat">
            <summary>
              Looks up a localized string similar to &lt;{0}&gt;.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DuplicateArgumentFormat">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; was supplied more than once..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.DuplicateArgumentPositionFormat">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; has the same position value as the argument &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.EmptyAliasFormat">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; cannot have an empty alias..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.EmptyArgumentName">
            <summary>
              Looks up a localized string similar to The argument name cannot be empty..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.EmptyArgumentNamePrefix">
            <summary>
              Looks up a localized string similar to An argument name prefix may not be null or an empty string..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.EmptyArgumentNamePrefixes">
            <summary>
              Looks up a localized string similar to You must specify at least one argument name prefix..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.IncorrectDefaultValueTypeFormat">
            <summary>
              Looks up a localized string similar to The type of the default value for argument &apos;{0}&apos; is not compatible with the type of the argument..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.IndentOutOfRange">
            <summary>
              Looks up a localized string similar to The indent must be greater than or equal to zero, and less than the maximum line length..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.IndexCountOutOfRange">
            <summary>
              Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.InvalidArrayRank">
            <summary>
              Looks up a localized string similar to Multi-dimensional arrays are not supported for command line arguments..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.InvalidDictionaryValueFormat">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; provided for argument &apos;{1}&apos; was invalid: {2}.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.InvalidOptionalArgumentOrder">
            <summary>
              Looks up a localized string similar to The command line constructor cannot have non-optional arguments after an optional argument..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.MissingArgumentAttribute">
            <summary>
              Looks up a localized string similar to The specified property is not a command line argument..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.MissingRequiredArgumentFormat">
            <summary>
              Looks up a localized string similar to The required argument &apos;{0}&apos; was not supplied..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.MissingValueForNamedArgumentFormat">
            <summary>
              Looks up a localized string similar to No value was supplied for the argument &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.MultipleMarkedConstructors">
            <summary>
              Looks up a localized string similar to The command line arguments type has more than one constructor with the CommandLineConstructorAttribute attribute..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.NoConstructor">
            <summary>
              Looks up a localized string similar to The command line arguments type does not have any public constructors..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.NoKeyValuePairSeparator">
            <summary>
              Looks up a localized string similar to An key/value pair must contain a &apos;=&apos; character..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.NoMarkedConstructor">
            <summary>
              Looks up a localized string similar to The command line arguments type has more than one constructor, none of which has the CommandLineConstructorAttribute attribute..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.NoTypeConverterForArgumentFormat">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; has type &apos;{1}&apos; that for which no type converter exists that can convert from a string..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.NoTypeConverterFormat">
            <summary>
              Looks up a localized string similar to No type converter that can convert to and from a string exists for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.PropertyIsReadOnlyFormat">
            <summary>
              Looks up a localized string similar to The property defining the argument &apos;{0}&apos; doesn&apos;t have a public set accessor..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.SetValueErrorFormat">
            <summary>
              Looks up a localized string similar to An error occurred setting the value of argument &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.TooManyArguments">
            <summary>
              Looks up a localized string similar to Too many arguments were supplied..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.TypeIsNotShellCommandFormat">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from the ShellCommand class or does not define the ShellCommandAttribute attribute..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.TypeNotGenericDefinition">
            <summary>
              Looks up a localized string similar to The type must be a generic type definition..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.UnknownArgumentFormat">
            <summary>
              Looks up a localized string similar to Unknown argument name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.Properties.Resources.ValueMustBeNonNegative">
            <summary>
              Looks up a localized string similar to The value must be zero or larger..
            </summary>
        </member>
        <member name="T:Ookii.CommandLine.ShellCommand">
            <summary>
            Represents a command that can be invoked through a command line application that supports more than one operation.
            </summary>
            <remarks>
            <para>
              Shell commands can be used to create shell utilities that perform more than one operation, where each operation has its own
              set of command line arguments. For example, a utility might be used to modify or query different configuration parameters
              of a system. Depending on whether it's a query or a modification, and which configuration parameter is used, the arguments
              to such a utility might differ. Rather than provide different executables for each operation, it is often more convenient
              to combine related operations in a single utility.
            </para>
            <para>
              For a program using shell commands, typically the first command line argument will be the name of the operation and identifies which
              shell command to use, while the remaining arguments are arguments to the command. The <see cref="T:Ookii.CommandLine.ShellCommand"/> class aids
              you in creating utilities that follow this pattern.
            </para>
            <para>
              A shell command is created by deriving a type from the <see cref="T:Ookii.CommandLine.ShellCommand"/> class, specifying the <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/>
              on that type to specify the name of the command, and implementing the <see cref="M:Ookii.CommandLine.ShellCommand.Run"/> method for that type.
            </para>
            <para>
              An application can get a list of all shell commands defined in an assembly by using the <see cref="M:Ookii.CommandLine.ShellCommand.GetShellCommands(System.Reflection.Assembly)"/> method, or
              get a specific shell command using the <see cref="M:Ookii.CommandLine.ShellCommand.GetShellCommand(System.Reflection.Assembly,System.String)"/> method. The <see cref="M:Ookii.CommandLine.ShellCommand.GetShellCommand(System.Reflection.Assembly,System.String)"/> method searches
              for a type that inherits from <see cref="T:Ookii.CommandLine.ShellCommand"/> and defines the <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> attribute, and
              where the value of the <see cref="P:Ookii.CommandLine.ShellCommandAttribute.CommandName"/> property matches the specified command name.
              If a matching type is found, it returns the <see cref="T:System.Type"/> instance for that type.
            </para>
            <para>
              Shell commands behave like regular command line arguments classes for the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class. Once
              a shell command has been found using the <see cref="M:Ookii.CommandLine.ShellCommand.GetShellCommand(System.Reflection.Assembly,System.String)"/> method, you can instantiate it by creating an
              instance of the <see cref="T:Ookii.CommandLine.CommandLineParser"/> class, passing the shell command's <see cref="T:System.Type"/> to the <see cref="M:Ookii.CommandLine.CommandLineParser.#ctor(System.Type)"/>
              constructor. Then invoke the <see cref="M:Ookii.CommandLine.CommandLineParser.Parse(System.String[],System.Int32)"/> method to parse the shell command's arguments (make sure to
              set index so that the command does not try to parse the command name), and cast the result to a <see cref="T:Ookii.CommandLine.ShellCommand"/> instance.
              Then invoke the <see cref="M:Ookii.CommandLine.ShellCommand.Run"/> method to invoke the command.
            </para>
            <para>
              It is recommended to return the value of the <see cref="P:Ookii.CommandLine.ShellCommand.ExitCode"/> property to the operating system
              (by returning it from the Main method or by using the <see cref="P:System.Environment.ExitCode"/> property) after running the shell command.
            </para>
            <para>
              Various utility methods to find, create and run shell commands are provided as <see langword="static"/> members of
              the <see cref="T:Ookii.CommandLine.ShellCommand"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.ShellCommand"/> class.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.Run">
            <summary>
            When implemented in a derived class, executes the command.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.GetShellCommands(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:System.Type"/> instance for shell commands defined in the specified assembly.
            </summary>
            <param name="assembly">The assembly whose types to search.</param>
            <returns>A list of types that inherit from <see cref="T:Ookii.CommandLine.ShellCommand"/> and specify the <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> attribute.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.WriteAssemblyCommandListToConsole(System.Reflection.Assembly)">
            <summary>
            Writes a list of all the shell commands in the specified assembly to the standard output stream.
            </summary>
            <param name="assembly">The assembly that contains the shell commands.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
              This method writes a list of all shell command names and their descriptions to the standard output stream, wrapping
              the lines to fit on the console automatically.
            </para>
            <para>
              A command's name is retrieved from its <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> attribute, and the description is retrieved
              from its <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute.
            </para>
            <para>
              Line wrapping at word boundaries is applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              This method indents additional lines for the command descriptions, unless the <see cref="P:System.Console.WindowWidth"/> property is less than 31.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.WriteAssemblyCommandList(System.IO.TextWriter,System.Reflection.Assembly)">
            <summary>
            Writes a list of all the shell commands in the specified assembly to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the commands to.</param>
            <param name="assembly">The assembly that contains the shell commands.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="writer"/> or <paramref name="assembly"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
              This method writes a list of all shell command names and their descriptions to <paramref name="writer"/>.
            </para>
            <para>
              A command's name is retrieved from its <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> attribute, and the description is retrieved
              from its <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute.
            </para>
            <para>
              If <paramref name="writer"/> is an instance of the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class, the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.Indent"/>
              property will be set to a value appropriate for the formatting of the command list, and indenting will be reset before each command. Indenting
              will not be used if the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> is less than 30.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.WriteAssemblyCommandList(System.IO.TextWriter,System.Reflection.Assembly,System.String)">
            <summary>
            Writes a list of all the shell commands in the specified assembly to the specified <see cref="T:System.IO.TextWriter"/> using the specified formatting options.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the commands to.</param>
            <param name="assembly">The assembly that contains the shell commands.</param>
            <param name="commandFormat">The format string used to format a command's name and description, for example "{0,13} : {1}".</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="writer"/>, <paramref name="assembly"/> or <paramref name="commandFormat"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
              The <paramref name="commandFormat"/> should have two placeholders, which are used for the command name and description respectively.
            </para>
            <para>
              This method writes a list of all shell command names and their descriptions to <paramref name="writer"/>.
            </para>
            <para>
              A command's name is retrieved from its <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> attribute, and the description is retrieved
              from its <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute.
            </para>
            <para>
              If <paramref name="writer"/> is a <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/>, the writer's indent will be reset before every
              command. It is recommended to set the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.Indent"/> property to a value appropriate for
              your <paramref name="commandFormat"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.IsShellCommand(System.Type)">
            <summary>
            Determines whether the specified type is a shell command type.
            </summary>
            <param name="type">The type to check.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <returns>
              <see langword="true"/> if the specified type is a shell command type; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
              A type is a shell command type if it is not an abstract type, inherits from the <see cref="T:Ookii.CommandLine.ShellCommand"/> class, and has the
              <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> applied to it.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.GetShellCommandName(System.Type)">
            <summary>
            Gets the name of the specified shell command.
            </summary>
            <param name="commandType">The <see cref="T:System.Type"/> of the shell command.</param>
            <returns>The shell command's name.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="commandType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="commandType"/> is not a shell command type.
            </exception>
            <remarks>
            <para>
              The shell command's name is determined by the name specified in its <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.GetShellCommandDescription(System.Type)">
            <summary>
            Gets the description of the specified shell command.
            </summary>
            <param name="commandType">The <see cref="T:System.Type"/> of the shell command.</param>
            <returns>The shell command's description, or <see langword="null"/> if it doesn't specify one.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="commandType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="commandType"/> is not a shell command type.
            </exception>
            <remarks>
            <para>
              A shell command's description is specified using the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.GetShellCommand(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the shell command with the specified command name, using a case-insensitive string comparison for the command names.
            </summary>
            <param name="assembly">The assembly whose types to search.</param>
            <param name="commandName">The command name of the shell command.</param>
            <returns>The <see cref="T:System.Type"/> of the specified shell command, or <see langword="null"/> if none could be found.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> or <paramref name="commandName"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
              This method uses <see cref="P:System.StringComparer.OrdinalIgnoreCase"/> to compare command names.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.GetShellCommand(System.Reflection.Assembly,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Gets the shell command with the specified command name, using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare command names.
            </summary>
            <param name="assembly">The assembly whose types to search.</param>
            <param name="commandName">The command name of the shell command.</param>
            <param name="commandNameComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare command names, or <see langword="null"/> to use the default case-insensitive comparer.</param>
            <returns>The <see cref="T:System.Type"/> of the specified shell command, or <see langword="null"/> if none could be found.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> or <paramref name="commandName"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
              This method uses <see cref="P:System.StringComparer.OrdinalIgnoreCase"/> to compare command names if <paramref name="commandNameComparer"/> is <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.CreateShellCommand(System.Reflection.Assembly,System.String,System.String[],System.Int32)">
            <summary>
            Finds and instantiates the shell command with the specified name, or if that fails, writes error and usage information to the standard error and output streams.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="commandName">The name of the command.</param>
            <param name="args">The arguments to the shell command.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <returns>An instance a class deriving from <see cref="T:Ookii.CommandLine.ShellCommand"/>, or <see langword="null"/> if the command was not found or an error occurred parsing the arguments.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> or <paramref name="args"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to the standard output stream. If an error occurs parsing the command's arguments, the error
              message is written to the standard error stream, and the shell command's usage information is written to the standard output stream.
            </para>
            <para>
              Line wrapping at word boundaries is applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              This method indents additional lines for the usage syntax, argument descriptions and command descriptions, unless the <see cref="P:System.Console.WindowWidth"/> property is less than 31.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.CreateShellCommand(System.Reflection.Assembly,System.String[],System.Int32)">
            <summary>
            Finds and instantiates the shell command from the specified arguments, or if that fails, writes error and usage information to the standard error and output streams.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="args">The arguments to the shell command, with the shell command name at the position specified by <paramref name="index"/>.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <returns>An instance a class deriving from <see cref="T:Ookii.CommandLine.ShellCommand"/>, or <see langword="null"/> if the command was not found or an error occurred parsing the arguments.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> or <paramref name="args"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to the standard output stream. If an error occurs parsing the command's arguments, the error
              message is written to the standard error stream, and the shell command's usage information is written to the standard output stream.
            </para>
            <para>
              Line wrapping at word boundaries is applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              This method indents additional lines for the usage syntax, argument descriptions and command descriptions, unless the <see cref="P:System.Console.WindowWidth"/> property is less than 31.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.CreateShellCommand(System.Reflection.Assembly,System.String,System.String[],System.Int32,Ookii.CommandLine.CreateShellCommandOptions)">
            <summary>
            Finds and instantiates the shell command with the specified name, or if that fails, writes error and usage information to the specified writers.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="commandName">The name of the command.</param>
            <param name="args">The arguments to the shell command.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <param name="options">The options to use.</param>
            <returns>An instance a class deriving from <see cref="T:Ookii.CommandLine.ShellCommand"/>, or <see langword="null"/> if the command was not found or an error occurred parsing the arguments.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/>, <paramref name="args"/>, or <paramref name="options"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>. If an error occurs parsing the command's arguments, the error
              message is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/>, and the shell command's usage information is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property is <see langword="null"/>, output
              is written to the standard output and error streams respectively, with line wrapping at word boundaries applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property are instance of the
              <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class, this method indents additional lines for the usage syntax and argument descriptions according
              to the values specified by the <see cref="T:Ookii.CommandLine.CreateShellCommandOptions"/>, unless the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property is less than 30.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.CreateShellCommand(System.Reflection.Assembly,System.String[],System.Int32,Ookii.CommandLine.CreateShellCommandOptions)">
            <summary>
            Finds and instantiates the shell command from the specified arguments, or if that fails, writes error and usage information to the specified writers.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="args">The arguments to the shell command, with the shell command name at the position specified by <paramref name="index"/>.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <param name="options">The options to use.</param>
            <returns>An instance a class deriving from <see cref="T:Ookii.CommandLine.ShellCommand"/>, or <see langword="null"/> if the command was not found or an error occurred parsing the arguments.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/>, <paramref name="args"/>, or <paramref name="options"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>. If an error occurs parsing the command's arguments, the error
              message is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/>, and the shell command's usage information is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property is <see langword="null"/>, output
              is written to the standard output and error streams respectively, with line wrapping at word boundaries applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property are instance of the
              <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class, this method indents additional lines for the usage syntax and argument descriptions according
              to the values specified by the <see cref="T:Ookii.CommandLine.CreateShellCommandOptions"/>, unless the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property is less than 30.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.RunShellCommand(System.Reflection.Assembly,System.String[],System.Int32)">
            <summary>
            Runs a shell command with the specified arguments; if the command name or arguments are invalid, prints error and usage information.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="args">The arguments to the shell command, with the shell command name at the position specified by <paramref name="index"/>.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <returns>The value of the <see cref="P:Ookii.CommandLine.ShellCommand.ExitCode"/> property after the command finishes running, or -1 if the command could not be created.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> or <paramref name="args"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to the standard output stream. If an error occurs parsing the command's arguments, the error
              message is written to  to the standard error stream, and the shell command's usage information is written to  to the standard output stream.
            </para>
            <para>
              Line wrapping at word boundaries is applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              This method indents additional lines for the usage syntax, argument descriptions and command descriptions, unless the <see cref="P:System.Console.WindowWidth"/> property is less than 31.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.RunShellCommand(System.Reflection.Assembly,System.String[],System.Int32,Ookii.CommandLine.CreateShellCommandOptions)">
            <summary>
            Runs a shell command with the specified arguments; if the command name or arguments are invalid, prints error and usage information.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="args">The arguments to the shell command, with the shell command name at the position specified by <paramref name="index"/>.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <param name="options">The options to use.</param>
            <returns>The value of the <see cref="P:Ookii.CommandLine.ShellCommand.ExitCode"/> property after the command finishes running, or -1 if the command could not be created.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/>, <paramref name="args"/>, or <paramref name="options"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>. If an error occurs parsing the command's arguments, the error
              message is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/>, and the shell command's usage information is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property is <see langword="null"/>, output
              is written to the standard output and error streams respectively, with line wrapping at word boundaries applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property are instance of the
              <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class, this method indents additional lines for the usage syntax and argument descriptions according
              to the values specified by the <see cref="T:Ookii.CommandLine.CreateShellCommandOptions"/>, unless the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property is less than 30.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.RunShellCommand(System.Reflection.Assembly,System.String,System.String[],System.Int32)">
            <summary>
            Runs the specified shell command with the specified arguments; if the command name or arguments are invalid, prints error and usage information.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="commandName">The name of the command.</param>
            <param name="args">The arguments to the shell command.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <returns>The value of the <see cref="P:Ookii.CommandLine.ShellCommand.ExitCode"/> property after the command finishes running, or -1 if the command could not be created.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/> or <paramref name="args"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to the standard output stream. If an error occurs parsing the command's arguments, the error
              message is written to the standard error stream, and the shell command's usage information is written to the standard output stream.
            </para>
            <para>
              Line wrapping at word boundaries is applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              This method indents additional lines for the usage syntax, argument descriptions and command descriptions, unless the <see cref="P:System.Console.WindowWidth"/> property is less than 31.
            </para>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommand.RunShellCommand(System.Reflection.Assembly,System.String,System.String[],System.Int32,Ookii.CommandLine.CreateShellCommandOptions)">
            <summary>
            Runs the specified shell command with the specified arguments; if the command name or arguments are invalid, prints error and usage information.
            </summary>
            <param name="assembly">The assembly to search for the shell command.</param>
            <param name="commandName">The name of the command.</param>
            <param name="args">The arguments to the shell command.</param>
            <param name="index">The index in <paramref name="args"/> at which to start parsing the arguments.</param>
            <param name="options">The options to use.</param>
            <returns>The value of the <see cref="P:Ookii.CommandLine.ShellCommand.ExitCode"/> property after the command finishes running, or -1 if the command could not be created.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="assembly"/>, <paramref name="args"/>, or <paramref name="options"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> does not fall inside the bounds of <paramref name="args"/>.</exception>
            <remarks>
            <para>
              If the command could not be found, a list of possible commands is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>. If an error occurs parsing the command's arguments, the error
              message is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/>, and the shell command's usage information is written to <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property is <see langword="null"/>, output
              is written to the standard output and error streams respectively, with line wrapping at word boundaries applied to the output, wrapping at the console's window width. When the console output is
              redirected to a file, Microsoft .Net will still report the console's actual window width, but on Mono the value of
              the <see cref="P:System.Console.WindowWidth"/> property will be 0. In that case, the usage information will not be wrapped.
            </para>
            <para>
              If the <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/> property or <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> property are instance of the
              <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> class, this method indents additional lines for the usage syntax and argument descriptions according
              to the values specified by the <see cref="T:Ookii.CommandLine.CreateShellCommandOptions"/>, unless the <see cref="P:Ookii.CommandLine.LineWrappingTextWriter.MaximumLineLength"/> property is less than 30.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.ShellCommand.ExitCode">
            <summary>
            Gets or sets the exit code for the command.
            </summary>
            <value>
            The exit code for the command.
            </value>
            <remarks>
            <para>
              If your application doesn't process the exit code, it is recommended to return the value of
              the <see cref="P:Ookii.CommandLine.ShellCommand.ExitCode"/> property to the operating system by returning it from the Main method
              or setting the <see cref="P:System.Environment.ExitCode"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.ShellCommandAttribute">
            <summary>
            Attribute that specifies the name of a <see cref="T:Ookii.CommandLine.ShellCommand"/>.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommandAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> class using the target's type name as the command name.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.ShellCommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.ShellCommandAttribute"/> class using the specified command name.
            </summary>
            <param name="commandName">The name of the command, which can be used to locate it using the <see cref="M:Ookii.CommandLine.ShellCommand.GetShellCommand(System.Reflection.Assembly,System.String)"/> method.</param>
        </member>
        <member name="P:Ookii.CommandLine.ShellCommandAttribute.CommandName">
            <summary>
            Gets the name of the command, which can be used to locate it using the <see cref="M:Ookii.CommandLine.ShellCommand.GetShellCommand(System.Reflection.Assembly,System.String)"/> method.
            </summary>
            <value>
            The name of the command.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.ShellCommandAttribute.CustomArgumentParsing">
            <summary>
            Gets or sets a value indicating whether the command does its own argument parsing.
            </summary>
            <value>
            	<see langword="true"/> if the command does its own argument parsing; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              If this property is set to <see langword="true"/>, the <see cref="M:Ookii.CommandLine.ShellCommand.CreateShellCommand(System.Reflection.Assembly,System.String[],System.Int32)"/> method and 
              the <see cref="M:Ookii.CommandLine.ShellCommand.RunShellCommand(System.Reflection.Assembly,System.String[],System.Int32)"/>  will not create the command with the <see cref="T:Ookii.CommandLine.CommandLineParser"/>. Instead,
              the command type must define a constructor that takes three arguments: an array of <see cref="T:System.String"/> values that will contain the raw command line arguments, an <see cref="T:System.Int32"/> that
              indicates the index of the first argument in the array after the command name, and a <see cref="T:Ookii.CommandLine.CreateShellCommandOptions"/> instance specifying argument parsing
              and error handling options.
            </para>
            <para>
              This constructor should not throw an exception is argument parsing fails. Instead, it should write error and usage information to the <see cref="T:System.IO.TextWriter"/> instances specified by
              <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Error"/> and <see cref="P:Ookii.CommandLine.CreateShellCommandOptions.Out"/>.
            </para>
            <para>
              If this property is set to <see langword="true"/> and the shell command type does not have a constructor with those arguments, creating the command will fail.
            </para>
            </remarks>
        </member>
        <member name="T:Ookii.CommandLine.ValueDescriptionAttribute">
            <summary>
            Provides a custom value description for use in the usage help for an argument created from a constructor parameter.
            </summary>
            <remarks>
            <para>
              The value description is a short (typically one word) description that indicates the type of value that
              the user should supply. By default the type of the parameter is used. If the type is an array type, the
              array's element type is used. If the type is a nullable type, the nullable type's underlying type is used.
            </para>
            <para>
              The value description is used when printing usage. For example, the usage for an argument named Sample with
              a value description of String would look like "-Sample &lt;String&gt;".
            </para>
            <note>
              This is not the long description used to describe the purpose of the argument. That should be specified
              using the <see cref="T:System.ComponentModel.DescriptionAttribute"/> attribute.
            </note>
            </remarks>
        </member>
        <member name="M:Ookii.CommandLine.ValueDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.ValueDescriptionAttribute"/> class.
            </summary>
            <param name="valueDescription">The custom value description.</param>
        </member>
        <member name="P:Ookii.CommandLine.ValueDescriptionAttribute.ValueDescription">
            <summary>
            Gets the custom value description.
            </summary>
            <value>
            The custom value description.
            </value>
        </member>
        <member name="T:Ookii.CommandLine.WriteUsageOptions">
            <summary>
            Options for the <see cref="M:Ookii.CommandLine.CommandLineParser.WriteUsage(System.IO.TextWriter,System.Int32,Ookii.CommandLine.WriteUsageOptions)"/> method.
            </summary>
        </member>
        <member name="M:Ookii.CommandLine.WriteUsageOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ookii.CommandLine.WriteUsageOptions"/> class.
            </summary>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.IncludeApplicationDescription">
            <summary>
            Gets or sets a value indicating whether the value of the <see cref="P:Ookii.CommandLine.CommandLineParser.Description"/> property
            is written before the syntax.
            </summary>
            <value>
              <see langword="true"/> if the value of the <see cref="P:Ookii.CommandLine.CommandLineParser.Description"/> property
              is written before the syntax; otherwise, <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.UsagePrefix">
            <summary>
            Gets or sets the prefix to use for the argument syntax; typically this contains the executable name.
            </summary>
            <value>
            The prefix to use  for the argument syntax; typically this contains the executable name. The default value
            is "Usage: " followed by the file name of the application's entry point assembly.
            </value>
            <remarks>
            <para>
              The usage prefix is written before the command line syntax of the usage help, and is followed by the syntax
              of the individual arguments.
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.ValueDescriptionFormat">
            <summary>
            Gets or sets the format string to use for the value description of an argument.
            </summary>
            <value>
            The format string to use for the value description of an argument; the default value is "&lt;{0}&gt;".
            </value>
            <remarks>
            <para>
              The value description of an argument is used in the command line syntax in the usage help. For example,
              the usage for an argument might look like "-sample &lt;String&gt;". In this example, "String" is the
              value description, and that it is surrounded by angle brackets is the default value of the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ValueDescriptionFormat"/>
              property.
            </para>
            <para>
              This format string should have one placeholder, which is used for the value description of the argument.
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.Indent">
            <summary>
            Gets or sets the number of characters by which to indent all except the first line of the command line syntax of the usage help.
            </summary>
            <value>
            The number of characters by which to indent all except the first line of the command line usage. The default value is 3.
            </value>
            <remarks>
            <para>
              The command line syntax is a single line that consists of the usage prefix <see cref="P:Ookii.CommandLine.WriteUsageOptions.UsagePrefix"/> followed by the
              syntax of all the arguments. This indentation is used when that line exceeds the maximum line length.
            </para>
            <para>
              This value is not used if the maximum line length of the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> to which the usage
              is being written is less than 30.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.OptionalArgumentFormat">
            <summary>
            Gets or sets the format string to use for optional arguments and optional argument names.
            </summary>
            <value>
            The format string to use for optional arguments; the default value is "[{0}]".
            </value>
            <remarks>
            <para>
              This format string is used for optional parameters in the command line syntax. For example, using the default value, an
              optional parameter would be formatted as "[-sample &lt;String&gt;]". The format string is also used for positional arguments,
              in which case the argument name is optional. For example, an optional positional argument would be formatted as "[[-sample] &lt;String&gt;]"
              using the default value.
            </para>
            <para>
              This format string should have one placeholder, which is used for the entire argument or the argument name.
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.ArraySuffix">
            <summary>
            Gets or sets the suffix to append to the name of an array argument.
            </summary>
            <value>
            The suffix to append to the name of an array argument; the default value is "...".
            </value>
            <remarks>
            <para>
              An argument that has an array type can be specified multiple times. This suffix is appended to the command line syntax for
              the command to indicate that it can be repeated. For example, using the default options, an optional array argument would
              be formatted as "[-sample &lt;String&gt;...]"
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionFormat">
            <summary>
            Gets or sets the format string to use for the description of an argument.
            </summary>
            <value>
            The format string to use for the description of an argument; the default value is "    {3}{0} {2}\n{1}{4}{5}\n" (note that it contains line breaks).
            </value>
            <remarks>
            <para>
              This format string is used for the detailed descriptions of the arguments, which is written after
              the command line syntax.
            </para>
            <para>
              The <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionIndent"/> property should be set to something appropriate for this format. For example, in
              the default format, the description is indented by 8 characters.
            </para>
            <para>
              This format string can have four placeholders, which are used for the argument name, the description, the value description 
              (formatted according to the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ValueDescriptionFormat"/>), the primary argument name prefix, the default value, and
              the aliases. If the format string ends in a line break, the command descriptions will be separated by a blank line (this is the default).
            </para>
            <para>
              Placeholder {4} will be replaced with the default value of an argument, formatted according to the <see cref="P:Ookii.CommandLine.WriteUsageOptions.DefaultValueFormat"/> property.
              If the <see cref="P:Ookii.CommandLine.WriteUsageOptions.IncludeDefaultValueInDescription"/> property is set to <see langword="false"/> or the property's default value is
              <see langword="null"/>, this placeholder will be set to an empty string ("").
            </para>
            <para>
              Placeholder {5} will be replaced with the aliases of an argument, formatted according to the <see cref="P:Ookii.CommandLine.WriteUsageOptions.AliasFormat"/> or <see cref="P:Ookii.CommandLine.WriteUsageOptions.AliasesFormat"/> property.
              If the <see cref="P:Ookii.CommandLine.WriteUsageOptions.IncludeAliasInDescription"/> property is set to <see langword="false"/> or the property has no aliases, this placeholder will be set
              to an empty string ("").
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionIndent">
            <summary>
            Gets or sets the number of characters by which to indent the all but the first line of argument descriptions.
            </summary>
            <value>
            The number of characters by which to indent the all but the first line of argument descriptions. The default value is 8.
            </value>
            <remarks>
            <para>
              This property should be set to a value appropriate for the format string specified by the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionFormat"/> property.
            </para>
            <para>
              This value is not used if the maximum line length of the <see cref="T:Ookii.CommandLine.LineWrappingTextWriter"/> to which the usage
              is being written is less than 30.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.UseWhiteSpaceValueSeparator">
            <summary>
            Gets or sets a value indicating whether white space, rather than a colon, is used to separate named arguments and their values
            in the command line syntax.
            </summary>
            <value>
              <see langword="true"/> if the command line syntax uses a white space value separator; <see langword="false"/> if it uses a colon.
              The default value is <see langword="true"/>.
            </value>
            <remarks>
            <para>
              If this property is <see langword="true"/>, an argument would be formatted in the command line syntax as "-name &lt;Value&gt;" (using
              default formatting), with a white space character separating the argument name and value description. If this property is <see langword="false"/>,
              it would be formatted as "-name:&lt;Value&gt;", using a colon as the separator.
            </para>
            <para>
              The command line syntax will only use a white space character as the value separator if both the <see cref="P:Ookii.CommandLine.CommandLineParser.AllowWhiteSpaceValueSeparator"/> property
              and the <see cref="P:Ookii.CommandLine.WriteUsageOptions.UseWhiteSpaceValueSeparator"/> property are true.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.IncludeAliasInDescription">
            <summary>
            Gets or sets a value indicating whether the alias or aliases of an argument should be included in the argument description..
            </summary>
            <value>
            <see langword="true"/> if the alias(es) should be included in the description; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              If this property is <see langword="true"/> and an argument has one or more aliases, the aliases will be formatted using
              the <see cref="P:Ookii.CommandLine.WriteUsageOptions.AliasFormat"/> property (if there's one alias) or the <see cref="P:Ookii.CommandLine.WriteUsageOptions.AliasesFormat"/> property (for multiple
              aliases), and then included in the description according to the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionFormat"/> property.
            </para>
            <para>
              For arguments that do not have any aliases, this property has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.IncludeDefaultValueInDescription">
            <summary>
            Gets or sets a value indicating whether the default value of an argument should be included in the argument description.
            </summary>
            <value>
            <see langword="true"/> if the default value should be included in the description; otherwise, <see langword="false"/>.
            </value>
            <para>
              If this property is <see langword="true"/> and an argument has a default value other than <see langword="null"/>, the default value will be formatted using
              the <see cref="P:Ookii.CommandLine.WriteUsageOptions.DefaultValueFormat"/> property, and then included in the description according to the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionFormat"/> property.
            </para>
            <para>
              For arguments with a default value of <see langword="null"/>, this property has no effect.
            </para>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.AliasFormat">
            <summary>
            Gets or sets the format string to use to display the alias of an argument that only has one alias.
            </summary>
            <value>
            The format string for the alias of an argument; the default value is " Alias: {0}." (note the leading space).
            </value>
            <remarks>
            <para>
              The format specified by this property is used for an argument that has exactly one alias. Aliases
              are only added to the description if the <see cref="P:Ookii.CommandLine.WriteUsageOptions.IncludeAliasInDescription"/> property is
              <see langword="true"/>.
            </para>
            <para>
              This format string can have one placeholder, which will be set to the alias preceded by the primary argument name prefix.
            </para>
            <para>
              To modify the placement of the alias in the description of an argument, use the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionFormat"/> property.
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.AliasesFormat">
            <summary>
            Gets or sets the format string to use to display the alias of an argument that only has one alias.
            </summary>
            <value>
            The format string for the alias of an argument; the default value is " Aliases: {0}." (note the leading space).
            </value>
            <remarks>
            <para>
              The format specified by this property is used for an argument that has more than one alias. Aliases
              are only added to the description if the <see cref="P:Ookii.CommandLine.WriteUsageOptions.IncludeAliasInDescription"/> property is
              <see langword="true"/>.
            </para>
            <para>
              This format string can have one placeholder, which will be set to a comma-separated list of the aliases, each
              preceded by the primary argument name prefix.
            </para>
            <para>
              To modify the placement of the alias in the description of an argument, use the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionFormat"/> property.
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
        <member name="P:Ookii.CommandLine.WriteUsageOptions.DefaultValueFormat">
            <summary>
            Gets or sets the format string to use to display the alias of an argument that only has one alias.
            </summary>
            <value>
            The format string for the alias of an argument; the default value is " Default value: {0}." (note the leading space).
            </value>
            <remarks>
            <para>
              The format specified by this property is used for an argument that has a default value other than <see langword="null"/>. Default values
              are only added to the description if the <see cref="P:Ookii.CommandLine.WriteUsageOptions.IncludeDefaultValueInDescription"/> property is
              <see langword="true"/>.
            </para>
            <para>
              This format string can have one placeholder, which will be set to the default value.
            </para>
            <para>
              To modify the placement of the default value in the description of an argument, use the <see cref="P:Ookii.CommandLine.WriteUsageOptions.ArgumentDescriptionFormat"/> property.
            </para>
            <para>
              Setting this property to <see langword="null"/> will revert it to its default value.
            </para>
            </remarks>
        </member>
    </members>
</doc>
